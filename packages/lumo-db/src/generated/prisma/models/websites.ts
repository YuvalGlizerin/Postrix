
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
/* @ts-nocheck */
/**
 * This file exports the `websites` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model websites
 * 
 */
export type websitesModel = runtime.Types.Result.DefaultSelection<Prisma.$websitesPayload>

export type AggregateWebsites = {
  _count: WebsitesCountAggregateOutputType | null
  _avg: WebsitesAvgAggregateOutputType | null
  _sum: WebsitesSumAggregateOutputType | null
  _min: WebsitesMinAggregateOutputType | null
  _max: WebsitesMaxAggregateOutputType | null
}

export type WebsitesAvgAggregateOutputType = {
  id: number | null
  user_id: number | null
}

export type WebsitesSumAggregateOutputType = {
  id: number | null
  user_id: number | null
}

export type WebsitesMinAggregateOutputType = {
  id: number | null
  user_id: number | null
  website_name: string | null
  website_code: string | null
  domain: string | null
  created_at: Date | null
  updated_at: Date | null
}

export type WebsitesMaxAggregateOutputType = {
  id: number | null
  user_id: number | null
  website_name: string | null
  website_code: string | null
  domain: string | null
  created_at: Date | null
  updated_at: Date | null
}

export type WebsitesCountAggregateOutputType = {
  id: number
  user_id: number
  website_name: number
  website_code: number
  domain: number
  created_at: number
  updated_at: number
  _all: number
}


export type WebsitesAvgAggregateInputType = {
  id?: true
  user_id?: true
}

export type WebsitesSumAggregateInputType = {
  id?: true
  user_id?: true
}

export type WebsitesMinAggregateInputType = {
  id?: true
  user_id?: true
  website_name?: true
  website_code?: true
  domain?: true
  created_at?: true
  updated_at?: true
}

export type WebsitesMaxAggregateInputType = {
  id?: true
  user_id?: true
  website_name?: true
  website_code?: true
  domain?: true
  created_at?: true
  updated_at?: true
}

export type WebsitesCountAggregateInputType = {
  id?: true
  user_id?: true
  website_name?: true
  website_code?: true
  domain?: true
  created_at?: true
  updated_at?: true
  _all?: true
}

export type WebsitesAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which websites to aggregate.
   */
  where?: Prisma.websitesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of websites to fetch.
   */
  orderBy?: Prisma.websitesOrderByWithRelationInput | Prisma.websitesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.websitesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` websites from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` websites.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned websites
  **/
  _count?: true | WebsitesCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: WebsitesAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: WebsitesSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: WebsitesMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: WebsitesMaxAggregateInputType
}

export type GetWebsitesAggregateType<T extends WebsitesAggregateArgs> = {
      [P in keyof T & keyof AggregateWebsites]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateWebsites[P]>
    : Prisma.GetScalarType<T[P], AggregateWebsites[P]>
}




export type websitesGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.websitesWhereInput
  orderBy?: Prisma.websitesOrderByWithAggregationInput | Prisma.websitesOrderByWithAggregationInput[]
  by: Prisma.WebsitesScalarFieldEnum[] | Prisma.WebsitesScalarFieldEnum
  having?: Prisma.websitesScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: WebsitesCountAggregateInputType | true
  _avg?: WebsitesAvgAggregateInputType
  _sum?: WebsitesSumAggregateInputType
  _min?: WebsitesMinAggregateInputType
  _max?: WebsitesMaxAggregateInputType
}

export type WebsitesGroupByOutputType = {
  id: number
  user_id: number
  website_name: string
  website_code: string
  domain: string | null
  created_at: Date | null
  updated_at: Date | null
  _count: WebsitesCountAggregateOutputType | null
  _avg: WebsitesAvgAggregateOutputType | null
  _sum: WebsitesSumAggregateOutputType | null
  _min: WebsitesMinAggregateOutputType | null
  _max: WebsitesMaxAggregateOutputType | null
}

type GetWebsitesGroupByPayload<T extends websitesGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<WebsitesGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof WebsitesGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], WebsitesGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], WebsitesGroupByOutputType[P]>
      }
    >
  > 



export type websitesWhereInput = {
  AND?: Prisma.websitesWhereInput | Prisma.websitesWhereInput[]
  OR?: Prisma.websitesWhereInput[]
  NOT?: Prisma.websitesWhereInput | Prisma.websitesWhereInput[]
  id?: Prisma.IntFilter<"websites"> | number
  user_id?: Prisma.IntFilter<"websites"> | number
  website_name?: Prisma.StringFilter<"websites"> | string
  website_code?: Prisma.StringFilter<"websites"> | string
  domain?: Prisma.StringNullableFilter<"websites"> | string | null
  created_at?: Prisma.DateTimeNullableFilter<"websites"> | Date | string | null
  updated_at?: Prisma.DateTimeNullableFilter<"websites"> | Date | string | null
  user?: Prisma.XOR<Prisma.UsersScalarRelationFilter, Prisma.usersWhereInput>
}

export type websitesOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  website_name?: Prisma.SortOrder
  website_code?: Prisma.SortOrder
  domain?: Prisma.SortOrderInput | Prisma.SortOrder
  created_at?: Prisma.SortOrderInput | Prisma.SortOrder
  updated_at?: Prisma.SortOrderInput | Prisma.SortOrder
  user?: Prisma.usersOrderByWithRelationInput
}

export type websitesWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  user_id?: number
  AND?: Prisma.websitesWhereInput | Prisma.websitesWhereInput[]
  OR?: Prisma.websitesWhereInput[]
  NOT?: Prisma.websitesWhereInput | Prisma.websitesWhereInput[]
  website_name?: Prisma.StringFilter<"websites"> | string
  website_code?: Prisma.StringFilter<"websites"> | string
  domain?: Prisma.StringNullableFilter<"websites"> | string | null
  created_at?: Prisma.DateTimeNullableFilter<"websites"> | Date | string | null
  updated_at?: Prisma.DateTimeNullableFilter<"websites"> | Date | string | null
  user?: Prisma.XOR<Prisma.UsersScalarRelationFilter, Prisma.usersWhereInput>
}, "id" | "user_id">

export type websitesOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  website_name?: Prisma.SortOrder
  website_code?: Prisma.SortOrder
  domain?: Prisma.SortOrderInput | Prisma.SortOrder
  created_at?: Prisma.SortOrderInput | Prisma.SortOrder
  updated_at?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.websitesCountOrderByAggregateInput
  _avg?: Prisma.websitesAvgOrderByAggregateInput
  _max?: Prisma.websitesMaxOrderByAggregateInput
  _min?: Prisma.websitesMinOrderByAggregateInput
  _sum?: Prisma.websitesSumOrderByAggregateInput
}

export type websitesScalarWhereWithAggregatesInput = {
  AND?: Prisma.websitesScalarWhereWithAggregatesInput | Prisma.websitesScalarWhereWithAggregatesInput[]
  OR?: Prisma.websitesScalarWhereWithAggregatesInput[]
  NOT?: Prisma.websitesScalarWhereWithAggregatesInput | Prisma.websitesScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"websites"> | number
  user_id?: Prisma.IntWithAggregatesFilter<"websites"> | number
  website_name?: Prisma.StringWithAggregatesFilter<"websites"> | string
  website_code?: Prisma.StringWithAggregatesFilter<"websites"> | string
  domain?: Prisma.StringNullableWithAggregatesFilter<"websites"> | string | null
  created_at?: Prisma.DateTimeNullableWithAggregatesFilter<"websites"> | Date | string | null
  updated_at?: Prisma.DateTimeNullableWithAggregatesFilter<"websites"> | Date | string | null
}

export type websitesCreateInput = {
  website_name: string
  website_code: string
  domain?: string | null
  created_at?: Date | string | null
  updated_at?: Date | string | null
  user: Prisma.usersCreateNestedOneWithoutWebsitesInput
}

export type websitesUncheckedCreateInput = {
  id?: number
  user_id: number
  website_name: string
  website_code: string
  domain?: string | null
  created_at?: Date | string | null
  updated_at?: Date | string | null
}

export type websitesUpdateInput = {
  website_name?: Prisma.StringFieldUpdateOperationsInput | string
  website_code?: Prisma.StringFieldUpdateOperationsInput | string
  domain?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  user?: Prisma.usersUpdateOneRequiredWithoutWebsitesNestedInput
}

export type websitesUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  user_id?: Prisma.IntFieldUpdateOperationsInput | number
  website_name?: Prisma.StringFieldUpdateOperationsInput | string
  website_code?: Prisma.StringFieldUpdateOperationsInput | string
  domain?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type websitesCreateManyInput = {
  id?: number
  user_id: number
  website_name: string
  website_code: string
  domain?: string | null
  created_at?: Date | string | null
  updated_at?: Date | string | null
}

export type websitesUpdateManyMutationInput = {
  website_name?: Prisma.StringFieldUpdateOperationsInput | string
  website_code?: Prisma.StringFieldUpdateOperationsInput | string
  domain?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type websitesUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  user_id?: Prisma.IntFieldUpdateOperationsInput | number
  website_name?: Prisma.StringFieldUpdateOperationsInput | string
  website_code?: Prisma.StringFieldUpdateOperationsInput | string
  domain?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type WebsitesNullableScalarRelationFilter = {
  is?: Prisma.websitesWhereInput | null
  isNot?: Prisma.websitesWhereInput | null
}

export type websitesCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  website_name?: Prisma.SortOrder
  website_code?: Prisma.SortOrder
  domain?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
}

export type websitesAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
}

export type websitesMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  website_name?: Prisma.SortOrder
  website_code?: Prisma.SortOrder
  domain?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
}

export type websitesMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  website_name?: Prisma.SortOrder
  website_code?: Prisma.SortOrder
  domain?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
}

export type websitesSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
}

export type websitesCreateNestedOneWithoutUserInput = {
  create?: Prisma.XOR<Prisma.websitesCreateWithoutUserInput, Prisma.websitesUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.websitesCreateOrConnectWithoutUserInput
  connect?: Prisma.websitesWhereUniqueInput
}

export type websitesUncheckedCreateNestedOneWithoutUserInput = {
  create?: Prisma.XOR<Prisma.websitesCreateWithoutUserInput, Prisma.websitesUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.websitesCreateOrConnectWithoutUserInput
  connect?: Prisma.websitesWhereUniqueInput
}

export type websitesUpdateOneWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.websitesCreateWithoutUserInput, Prisma.websitesUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.websitesCreateOrConnectWithoutUserInput
  upsert?: Prisma.websitesUpsertWithoutUserInput
  disconnect?: Prisma.websitesWhereInput | boolean
  delete?: Prisma.websitesWhereInput | boolean
  connect?: Prisma.websitesWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.websitesUpdateToOneWithWhereWithoutUserInput, Prisma.websitesUpdateWithoutUserInput>, Prisma.websitesUncheckedUpdateWithoutUserInput>
}

export type websitesUncheckedUpdateOneWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.websitesCreateWithoutUserInput, Prisma.websitesUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.websitesCreateOrConnectWithoutUserInput
  upsert?: Prisma.websitesUpsertWithoutUserInput
  disconnect?: Prisma.websitesWhereInput | boolean
  delete?: Prisma.websitesWhereInput | boolean
  connect?: Prisma.websitesWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.websitesUpdateToOneWithWhereWithoutUserInput, Prisma.websitesUpdateWithoutUserInput>, Prisma.websitesUncheckedUpdateWithoutUserInput>
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type websitesCreateWithoutUserInput = {
  website_name: string
  website_code: string
  domain?: string | null
  created_at?: Date | string | null
  updated_at?: Date | string | null
}

export type websitesUncheckedCreateWithoutUserInput = {
  id?: number
  website_name: string
  website_code: string
  domain?: string | null
  created_at?: Date | string | null
  updated_at?: Date | string | null
}

export type websitesCreateOrConnectWithoutUserInput = {
  where: Prisma.websitesWhereUniqueInput
  create: Prisma.XOR<Prisma.websitesCreateWithoutUserInput, Prisma.websitesUncheckedCreateWithoutUserInput>
}

export type websitesUpsertWithoutUserInput = {
  update: Prisma.XOR<Prisma.websitesUpdateWithoutUserInput, Prisma.websitesUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.websitesCreateWithoutUserInput, Prisma.websitesUncheckedCreateWithoutUserInput>
  where?: Prisma.websitesWhereInput
}

export type websitesUpdateToOneWithWhereWithoutUserInput = {
  where?: Prisma.websitesWhereInput
  data: Prisma.XOR<Prisma.websitesUpdateWithoutUserInput, Prisma.websitesUncheckedUpdateWithoutUserInput>
}

export type websitesUpdateWithoutUserInput = {
  website_name?: Prisma.StringFieldUpdateOperationsInput | string
  website_code?: Prisma.StringFieldUpdateOperationsInput | string
  domain?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type websitesUncheckedUpdateWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  website_name?: Prisma.StringFieldUpdateOperationsInput | string
  website_code?: Prisma.StringFieldUpdateOperationsInput | string
  domain?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}



export type websitesSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  user_id?: boolean
  website_name?: boolean
  website_code?: boolean
  domain?: boolean
  created_at?: boolean
  updated_at?: boolean
  user?: boolean | Prisma.usersDefaultArgs<ExtArgs>
}, ExtArgs["result"]["websites"]>

export type websitesSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  user_id?: boolean
  website_name?: boolean
  website_code?: boolean
  domain?: boolean
  created_at?: boolean
  updated_at?: boolean
  user?: boolean | Prisma.usersDefaultArgs<ExtArgs>
}, ExtArgs["result"]["websites"]>

export type websitesSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  user_id?: boolean
  website_name?: boolean
  website_code?: boolean
  domain?: boolean
  created_at?: boolean
  updated_at?: boolean
  user?: boolean | Prisma.usersDefaultArgs<ExtArgs>
}, ExtArgs["result"]["websites"]>

export type websitesSelectScalar = {
  id?: boolean
  user_id?: boolean
  website_name?: boolean
  website_code?: boolean
  domain?: boolean
  created_at?: boolean
  updated_at?: boolean
}

export type websitesOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "user_id" | "website_name" | "website_code" | "domain" | "created_at" | "updated_at", ExtArgs["result"]["websites"]>
export type websitesInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.usersDefaultArgs<ExtArgs>
}
export type websitesIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.usersDefaultArgs<ExtArgs>
}
export type websitesIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.usersDefaultArgs<ExtArgs>
}

export type $websitesPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "websites"
  objects: {
    user: Prisma.$usersPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    user_id: number
    website_name: string
    website_code: string
    domain: string | null
    created_at: Date | null
    updated_at: Date | null
  }, ExtArgs["result"]["websites"]>
  composites: {}
}

export type websitesGetPayload<S extends boolean | null | undefined | websitesDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$websitesPayload, S>

export type websitesCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<websitesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: WebsitesCountAggregateInputType | true
  }

export interface websitesDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['websites'], meta: { name: 'websites' } }
  /**
   * Find zero or one Websites that matches the filter.
   * @param {websitesFindUniqueArgs} args - Arguments to find a Websites
   * @example
   * // Get one Websites
   * const websites = await prisma.websites.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends websitesFindUniqueArgs>(args: Prisma.SelectSubset<T, websitesFindUniqueArgs<ExtArgs>>): Prisma.Prisma__websitesClient<runtime.Types.Result.GetResult<Prisma.$websitesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Websites that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {websitesFindUniqueOrThrowArgs} args - Arguments to find a Websites
   * @example
   * // Get one Websites
   * const websites = await prisma.websites.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends websitesFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, websitesFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__websitesClient<runtime.Types.Result.GetResult<Prisma.$websitesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Websites that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {websitesFindFirstArgs} args - Arguments to find a Websites
   * @example
   * // Get one Websites
   * const websites = await prisma.websites.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends websitesFindFirstArgs>(args?: Prisma.SelectSubset<T, websitesFindFirstArgs<ExtArgs>>): Prisma.Prisma__websitesClient<runtime.Types.Result.GetResult<Prisma.$websitesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Websites that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {websitesFindFirstOrThrowArgs} args - Arguments to find a Websites
   * @example
   * // Get one Websites
   * const websites = await prisma.websites.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends websitesFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, websitesFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__websitesClient<runtime.Types.Result.GetResult<Prisma.$websitesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Websites that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {websitesFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Websites
   * const websites = await prisma.websites.findMany()
   * 
   * // Get first 10 Websites
   * const websites = await prisma.websites.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const websitesWithIdOnly = await prisma.websites.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends websitesFindManyArgs>(args?: Prisma.SelectSubset<T, websitesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$websitesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Websites.
   * @param {websitesCreateArgs} args - Arguments to create a Websites.
   * @example
   * // Create one Websites
   * const Websites = await prisma.websites.create({
   *   data: {
   *     // ... data to create a Websites
   *   }
   * })
   * 
   */
  create<T extends websitesCreateArgs>(args: Prisma.SelectSubset<T, websitesCreateArgs<ExtArgs>>): Prisma.Prisma__websitesClient<runtime.Types.Result.GetResult<Prisma.$websitesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Websites.
   * @param {websitesCreateManyArgs} args - Arguments to create many Websites.
   * @example
   * // Create many Websites
   * const websites = await prisma.websites.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends websitesCreateManyArgs>(args?: Prisma.SelectSubset<T, websitesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Websites and returns the data saved in the database.
   * @param {websitesCreateManyAndReturnArgs} args - Arguments to create many Websites.
   * @example
   * // Create many Websites
   * const websites = await prisma.websites.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Websites and only return the `id`
   * const websitesWithIdOnly = await prisma.websites.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends websitesCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, websitesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$websitesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Websites.
   * @param {websitesDeleteArgs} args - Arguments to delete one Websites.
   * @example
   * // Delete one Websites
   * const Websites = await prisma.websites.delete({
   *   where: {
   *     // ... filter to delete one Websites
   *   }
   * })
   * 
   */
  delete<T extends websitesDeleteArgs>(args: Prisma.SelectSubset<T, websitesDeleteArgs<ExtArgs>>): Prisma.Prisma__websitesClient<runtime.Types.Result.GetResult<Prisma.$websitesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Websites.
   * @param {websitesUpdateArgs} args - Arguments to update one Websites.
   * @example
   * // Update one Websites
   * const websites = await prisma.websites.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends websitesUpdateArgs>(args: Prisma.SelectSubset<T, websitesUpdateArgs<ExtArgs>>): Prisma.Prisma__websitesClient<runtime.Types.Result.GetResult<Prisma.$websitesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Websites.
   * @param {websitesDeleteManyArgs} args - Arguments to filter Websites to delete.
   * @example
   * // Delete a few Websites
   * const { count } = await prisma.websites.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends websitesDeleteManyArgs>(args?: Prisma.SelectSubset<T, websitesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Websites.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {websitesUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Websites
   * const websites = await prisma.websites.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends websitesUpdateManyArgs>(args: Prisma.SelectSubset<T, websitesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Websites and returns the data updated in the database.
   * @param {websitesUpdateManyAndReturnArgs} args - Arguments to update many Websites.
   * @example
   * // Update many Websites
   * const websites = await prisma.websites.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Websites and only return the `id`
   * const websitesWithIdOnly = await prisma.websites.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends websitesUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, websitesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$websitesPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Websites.
   * @param {websitesUpsertArgs} args - Arguments to update or create a Websites.
   * @example
   * // Update or create a Websites
   * const websites = await prisma.websites.upsert({
   *   create: {
   *     // ... data to create a Websites
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Websites we want to update
   *   }
   * })
   */
  upsert<T extends websitesUpsertArgs>(args: Prisma.SelectSubset<T, websitesUpsertArgs<ExtArgs>>): Prisma.Prisma__websitesClient<runtime.Types.Result.GetResult<Prisma.$websitesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Websites.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {websitesCountArgs} args - Arguments to filter Websites to count.
   * @example
   * // Count the number of Websites
   * const count = await prisma.websites.count({
   *   where: {
   *     // ... the filter for the Websites we want to count
   *   }
   * })
  **/
  count<T extends websitesCountArgs>(
    args?: Prisma.Subset<T, websitesCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], WebsitesCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Websites.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WebsitesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends WebsitesAggregateArgs>(args: Prisma.Subset<T, WebsitesAggregateArgs>): Prisma.PrismaPromise<GetWebsitesAggregateType<T>>

  /**
   * Group by Websites.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {websitesGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends websitesGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: websitesGroupByArgs['orderBy'] }
      : { orderBy?: websitesGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, websitesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWebsitesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the websites model
 */
readonly fields: websitesFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for websites.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__websitesClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.usersDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.usersDefaultArgs<ExtArgs>>): Prisma.Prisma__usersClient<runtime.Types.Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the websites model
 */
export interface websitesFieldRefs {
  readonly id: Prisma.FieldRef<"websites", 'Int'>
  readonly user_id: Prisma.FieldRef<"websites", 'Int'>
  readonly website_name: Prisma.FieldRef<"websites", 'String'>
  readonly website_code: Prisma.FieldRef<"websites", 'String'>
  readonly domain: Prisma.FieldRef<"websites", 'String'>
  readonly created_at: Prisma.FieldRef<"websites", 'DateTime'>
  readonly updated_at: Prisma.FieldRef<"websites", 'DateTime'>
}
    

// Custom InputTypes
/**
 * websites findUnique
 */
export type websitesFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the websites
   */
  select?: Prisma.websitesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the websites
   */
  omit?: Prisma.websitesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.websitesInclude<ExtArgs> | null
  /**
   * Filter, which websites to fetch.
   */
  where: Prisma.websitesWhereUniqueInput
}

/**
 * websites findUniqueOrThrow
 */
export type websitesFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the websites
   */
  select?: Prisma.websitesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the websites
   */
  omit?: Prisma.websitesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.websitesInclude<ExtArgs> | null
  /**
   * Filter, which websites to fetch.
   */
  where: Prisma.websitesWhereUniqueInput
}

/**
 * websites findFirst
 */
export type websitesFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the websites
   */
  select?: Prisma.websitesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the websites
   */
  omit?: Prisma.websitesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.websitesInclude<ExtArgs> | null
  /**
   * Filter, which websites to fetch.
   */
  where?: Prisma.websitesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of websites to fetch.
   */
  orderBy?: Prisma.websitesOrderByWithRelationInput | Prisma.websitesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for websites.
   */
  cursor?: Prisma.websitesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` websites from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` websites.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of websites.
   */
  distinct?: Prisma.WebsitesScalarFieldEnum | Prisma.WebsitesScalarFieldEnum[]
}

/**
 * websites findFirstOrThrow
 */
export type websitesFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the websites
   */
  select?: Prisma.websitesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the websites
   */
  omit?: Prisma.websitesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.websitesInclude<ExtArgs> | null
  /**
   * Filter, which websites to fetch.
   */
  where?: Prisma.websitesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of websites to fetch.
   */
  orderBy?: Prisma.websitesOrderByWithRelationInput | Prisma.websitesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for websites.
   */
  cursor?: Prisma.websitesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` websites from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` websites.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of websites.
   */
  distinct?: Prisma.WebsitesScalarFieldEnum | Prisma.WebsitesScalarFieldEnum[]
}

/**
 * websites findMany
 */
export type websitesFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the websites
   */
  select?: Prisma.websitesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the websites
   */
  omit?: Prisma.websitesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.websitesInclude<ExtArgs> | null
  /**
   * Filter, which websites to fetch.
   */
  where?: Prisma.websitesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of websites to fetch.
   */
  orderBy?: Prisma.websitesOrderByWithRelationInput | Prisma.websitesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing websites.
   */
  cursor?: Prisma.websitesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` websites from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` websites.
   */
  skip?: number
  distinct?: Prisma.WebsitesScalarFieldEnum | Prisma.WebsitesScalarFieldEnum[]
}

/**
 * websites create
 */
export type websitesCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the websites
   */
  select?: Prisma.websitesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the websites
   */
  omit?: Prisma.websitesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.websitesInclude<ExtArgs> | null
  /**
   * The data needed to create a websites.
   */
  data: Prisma.XOR<Prisma.websitesCreateInput, Prisma.websitesUncheckedCreateInput>
}

/**
 * websites createMany
 */
export type websitesCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many websites.
   */
  data: Prisma.websitesCreateManyInput | Prisma.websitesCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * websites createManyAndReturn
 */
export type websitesCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the websites
   */
  select?: Prisma.websitesSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the websites
   */
  omit?: Prisma.websitesOmit<ExtArgs> | null
  /**
   * The data used to create many websites.
   */
  data: Prisma.websitesCreateManyInput | Prisma.websitesCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.websitesIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * websites update
 */
export type websitesUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the websites
   */
  select?: Prisma.websitesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the websites
   */
  omit?: Prisma.websitesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.websitesInclude<ExtArgs> | null
  /**
   * The data needed to update a websites.
   */
  data: Prisma.XOR<Prisma.websitesUpdateInput, Prisma.websitesUncheckedUpdateInput>
  /**
   * Choose, which websites to update.
   */
  where: Prisma.websitesWhereUniqueInput
}

/**
 * websites updateMany
 */
export type websitesUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update websites.
   */
  data: Prisma.XOR<Prisma.websitesUpdateManyMutationInput, Prisma.websitesUncheckedUpdateManyInput>
  /**
   * Filter which websites to update
   */
  where?: Prisma.websitesWhereInput
  /**
   * Limit how many websites to update.
   */
  limit?: number
}

/**
 * websites updateManyAndReturn
 */
export type websitesUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the websites
   */
  select?: Prisma.websitesSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the websites
   */
  omit?: Prisma.websitesOmit<ExtArgs> | null
  /**
   * The data used to update websites.
   */
  data: Prisma.XOR<Prisma.websitesUpdateManyMutationInput, Prisma.websitesUncheckedUpdateManyInput>
  /**
   * Filter which websites to update
   */
  where?: Prisma.websitesWhereInput
  /**
   * Limit how many websites to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.websitesIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * websites upsert
 */
export type websitesUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the websites
   */
  select?: Prisma.websitesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the websites
   */
  omit?: Prisma.websitesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.websitesInclude<ExtArgs> | null
  /**
   * The filter to search for the websites to update in case it exists.
   */
  where: Prisma.websitesWhereUniqueInput
  /**
   * In case the websites found by the `where` argument doesn't exist, create a new websites with this data.
   */
  create: Prisma.XOR<Prisma.websitesCreateInput, Prisma.websitesUncheckedCreateInput>
  /**
   * In case the websites was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.websitesUpdateInput, Prisma.websitesUncheckedUpdateInput>
}

/**
 * websites delete
 */
export type websitesDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the websites
   */
  select?: Prisma.websitesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the websites
   */
  omit?: Prisma.websitesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.websitesInclude<ExtArgs> | null
  /**
   * Filter which websites to delete.
   */
  where: Prisma.websitesWhereUniqueInput
}

/**
 * websites deleteMany
 */
export type websitesDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which websites to delete
   */
  where?: Prisma.websitesWhereInput
  /**
   * Limit how many websites to delete.
   */
  limit?: number
}

/**
 * websites without action
 */
export type websitesDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the websites
   */
  select?: Prisma.websitesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the websites
   */
  omit?: Prisma.websitesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.websitesInclude<ExtArgs> | null
}
