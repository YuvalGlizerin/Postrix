generator client {
  provider = "prisma-client"
  output   = "../src/generated/prisma"
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x", "linux-arm64-openssl-3.0.x"] // Add debian for server environments, TODO: Review this on prisma 7
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum DatePosted {
  anyTime
  pastMonth
  pastWeek
  past24Hours
}

enum JobType {
  fullTime
  partTime
  contract
  internship
}

enum OnsiteRemote {
  onsite
  remote
  hybrid
}

model users {
  id              Int              @id @default(autoincrement())
  phone_number    String?          @unique @db.VarChar(100)
  created_at      DateTime?        @default(now()) @db.Timestamp(6)
  updated_at      DateTime?        @default(now()) @db.Timestamp(6)
  last_response_id String?         @db.VarChar(255) // Store OpenAI response ID for conversation threading
  job_preferences job_preferences?
}

model job_preferences {
  id             Int       @id @default(autoincrement())
  user_id        Int       @unique // Make user_id unique for one-to-one relationship
  keywords       String    @db.VarChar(255) // Keywords(space separated) for job search, should be short and concise
  job_preference String    @db.Text // Job preference, a description of the job you are looking for with all the details
  alert_schedule String    @db.VarChar(100) // Cron job syntax (e.g., "0 9 * * 1" for weekly at 9 AM on Monday)
  location       String?   @db.VarChar(255)
  time_zone      String?   @db.VarChar(255)
  companies      String[]  @default([]) @db.VarChar(255)
  datePosted     DatePosted? 
  jobType        JobType?
  onsiteRemote   OnsiteRemote?
  created_at     DateTime? @default(now()) @db.Timestamp(6)
  updated_at     DateTime? @default(now()) @db.Timestamp(6)

  user users @relation(fields: [user_id], references: [id])
}
