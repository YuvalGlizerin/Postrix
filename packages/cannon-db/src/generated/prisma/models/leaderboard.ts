
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
/* @ts-nocheck */
/**
 * This file exports the `leaderboard` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model leaderboard
 * 
 */
export type leaderboardModel = runtime.Types.Result.DefaultSelection<Prisma.$leaderboardPayload>

export type AggregateLeaderboard = {
  _count: LeaderboardCountAggregateOutputType | null
  _avg: LeaderboardAvgAggregateOutputType | null
  _sum: LeaderboardSumAggregateOutputType | null
  _min: LeaderboardMinAggregateOutputType | null
  _max: LeaderboardMaxAggregateOutputType | null
}

export type LeaderboardAvgAggregateOutputType = {
  id: number | null
  score: number | null
}

export type LeaderboardSumAggregateOutputType = {
  id: number | null
  score: number | null
}

export type LeaderboardMinAggregateOutputType = {
  id: number | null
  username: string | null
  score: number | null
  created_at: Date | null
  updated_at: Date | null
}

export type LeaderboardMaxAggregateOutputType = {
  id: number | null
  username: string | null
  score: number | null
  created_at: Date | null
  updated_at: Date | null
}

export type LeaderboardCountAggregateOutputType = {
  id: number
  username: number
  score: number
  created_at: number
  updated_at: number
  _all: number
}


export type LeaderboardAvgAggregateInputType = {
  id?: true
  score?: true
}

export type LeaderboardSumAggregateInputType = {
  id?: true
  score?: true
}

export type LeaderboardMinAggregateInputType = {
  id?: true
  username?: true
  score?: true
  created_at?: true
  updated_at?: true
}

export type LeaderboardMaxAggregateInputType = {
  id?: true
  username?: true
  score?: true
  created_at?: true
  updated_at?: true
}

export type LeaderboardCountAggregateInputType = {
  id?: true
  username?: true
  score?: true
  created_at?: true
  updated_at?: true
  _all?: true
}

export type LeaderboardAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which leaderboard to aggregate.
   */
  where?: Prisma.leaderboardWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of leaderboards to fetch.
   */
  orderBy?: Prisma.leaderboardOrderByWithRelationInput | Prisma.leaderboardOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.leaderboardWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` leaderboards from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` leaderboards.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned leaderboards
  **/
  _count?: true | LeaderboardCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: LeaderboardAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: LeaderboardSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: LeaderboardMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: LeaderboardMaxAggregateInputType
}

export type GetLeaderboardAggregateType<T extends LeaderboardAggregateArgs> = {
      [P in keyof T & keyof AggregateLeaderboard]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateLeaderboard[P]>
    : Prisma.GetScalarType<T[P], AggregateLeaderboard[P]>
}




export type leaderboardGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.leaderboardWhereInput
  orderBy?: Prisma.leaderboardOrderByWithAggregationInput | Prisma.leaderboardOrderByWithAggregationInput[]
  by: Prisma.LeaderboardScalarFieldEnum[] | Prisma.LeaderboardScalarFieldEnum
  having?: Prisma.leaderboardScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: LeaderboardCountAggregateInputType | true
  _avg?: LeaderboardAvgAggregateInputType
  _sum?: LeaderboardSumAggregateInputType
  _min?: LeaderboardMinAggregateInputType
  _max?: LeaderboardMaxAggregateInputType
}

export type LeaderboardGroupByOutputType = {
  id: number
  username: string | null
  score: number | null
  created_at: Date | null
  updated_at: Date | null
  _count: LeaderboardCountAggregateOutputType | null
  _avg: LeaderboardAvgAggregateOutputType | null
  _sum: LeaderboardSumAggregateOutputType | null
  _min: LeaderboardMinAggregateOutputType | null
  _max: LeaderboardMaxAggregateOutputType | null
}

type GetLeaderboardGroupByPayload<T extends leaderboardGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<LeaderboardGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof LeaderboardGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], LeaderboardGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], LeaderboardGroupByOutputType[P]>
      }
    >
  > 



export type leaderboardWhereInput = {
  AND?: Prisma.leaderboardWhereInput | Prisma.leaderboardWhereInput[]
  OR?: Prisma.leaderboardWhereInput[]
  NOT?: Prisma.leaderboardWhereInput | Prisma.leaderboardWhereInput[]
  id?: Prisma.IntFilter<"leaderboard"> | number
  username?: Prisma.StringNullableFilter<"leaderboard"> | string | null
  score?: Prisma.IntNullableFilter<"leaderboard"> | number | null
  created_at?: Prisma.DateTimeNullableFilter<"leaderboard"> | Date | string | null
  updated_at?: Prisma.DateTimeNullableFilter<"leaderboard"> | Date | string | null
}

export type leaderboardOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  username?: Prisma.SortOrderInput | Prisma.SortOrder
  score?: Prisma.SortOrderInput | Prisma.SortOrder
  created_at?: Prisma.SortOrderInput | Prisma.SortOrder
  updated_at?: Prisma.SortOrderInput | Prisma.SortOrder
}

export type leaderboardWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  username?: string
  AND?: Prisma.leaderboardWhereInput | Prisma.leaderboardWhereInput[]
  OR?: Prisma.leaderboardWhereInput[]
  NOT?: Prisma.leaderboardWhereInput | Prisma.leaderboardWhereInput[]
  score?: Prisma.IntNullableFilter<"leaderboard"> | number | null
  created_at?: Prisma.DateTimeNullableFilter<"leaderboard"> | Date | string | null
  updated_at?: Prisma.DateTimeNullableFilter<"leaderboard"> | Date | string | null
}, "id" | "username">

export type leaderboardOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  username?: Prisma.SortOrderInput | Prisma.SortOrder
  score?: Prisma.SortOrderInput | Prisma.SortOrder
  created_at?: Prisma.SortOrderInput | Prisma.SortOrder
  updated_at?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.leaderboardCountOrderByAggregateInput
  _avg?: Prisma.leaderboardAvgOrderByAggregateInput
  _max?: Prisma.leaderboardMaxOrderByAggregateInput
  _min?: Prisma.leaderboardMinOrderByAggregateInput
  _sum?: Prisma.leaderboardSumOrderByAggregateInput
}

export type leaderboardScalarWhereWithAggregatesInput = {
  AND?: Prisma.leaderboardScalarWhereWithAggregatesInput | Prisma.leaderboardScalarWhereWithAggregatesInput[]
  OR?: Prisma.leaderboardScalarWhereWithAggregatesInput[]
  NOT?: Prisma.leaderboardScalarWhereWithAggregatesInput | Prisma.leaderboardScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"leaderboard"> | number
  username?: Prisma.StringNullableWithAggregatesFilter<"leaderboard"> | string | null
  score?: Prisma.IntNullableWithAggregatesFilter<"leaderboard"> | number | null
  created_at?: Prisma.DateTimeNullableWithAggregatesFilter<"leaderboard"> | Date | string | null
  updated_at?: Prisma.DateTimeNullableWithAggregatesFilter<"leaderboard"> | Date | string | null
}

export type leaderboardCreateInput = {
  username?: string | null
  score?: number | null
  created_at?: Date | string | null
  updated_at?: Date | string | null
}

export type leaderboardUncheckedCreateInput = {
  id?: number
  username?: string | null
  score?: number | null
  created_at?: Date | string | null
  updated_at?: Date | string | null
}

export type leaderboardUpdateInput = {
  username?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  score?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type leaderboardUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  username?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  score?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type leaderboardCreateManyInput = {
  id?: number
  username?: string | null
  score?: number | null
  created_at?: Date | string | null
  updated_at?: Date | string | null
}

export type leaderboardUpdateManyMutationInput = {
  username?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  score?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type leaderboardUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  username?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  score?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type leaderboardCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  username?: Prisma.SortOrder
  score?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
}

export type leaderboardAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  score?: Prisma.SortOrder
}

export type leaderboardMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  username?: Prisma.SortOrder
  score?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
}

export type leaderboardMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  username?: Prisma.SortOrder
  score?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
}

export type leaderboardSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  score?: Prisma.SortOrder
}

export type NullableStringFieldUpdateOperationsInput = {
  set?: string | null
}

export type NullableIntFieldUpdateOperationsInput = {
  set?: number | null
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type NullableDateTimeFieldUpdateOperationsInput = {
  set?: Date | string | null
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}



export type leaderboardSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  username?: boolean
  score?: boolean
  created_at?: boolean
  updated_at?: boolean
}, ExtArgs["result"]["leaderboard"]>

export type leaderboardSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  username?: boolean
  score?: boolean
  created_at?: boolean
  updated_at?: boolean
}, ExtArgs["result"]["leaderboard"]>

export type leaderboardSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  username?: boolean
  score?: boolean
  created_at?: boolean
  updated_at?: boolean
}, ExtArgs["result"]["leaderboard"]>

export type leaderboardSelectScalar = {
  id?: boolean
  username?: boolean
  score?: boolean
  created_at?: boolean
  updated_at?: boolean
}

export type leaderboardOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "username" | "score" | "created_at" | "updated_at", ExtArgs["result"]["leaderboard"]>

export type $leaderboardPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "leaderboard"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    username: string | null
    score: number | null
    created_at: Date | null
    updated_at: Date | null
  }, ExtArgs["result"]["leaderboard"]>
  composites: {}
}

export type leaderboardGetPayload<S extends boolean | null | undefined | leaderboardDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$leaderboardPayload, S>

export type leaderboardCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<leaderboardFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: LeaderboardCountAggregateInputType | true
  }

export interface leaderboardDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['leaderboard'], meta: { name: 'leaderboard' } }
  /**
   * Find zero or one Leaderboard that matches the filter.
   * @param {leaderboardFindUniqueArgs} args - Arguments to find a Leaderboard
   * @example
   * // Get one Leaderboard
   * const leaderboard = await prisma.leaderboard.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends leaderboardFindUniqueArgs>(args: Prisma.SelectSubset<T, leaderboardFindUniqueArgs<ExtArgs>>): Prisma.Prisma__leaderboardClient<runtime.Types.Result.GetResult<Prisma.$leaderboardPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Leaderboard that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {leaderboardFindUniqueOrThrowArgs} args - Arguments to find a Leaderboard
   * @example
   * // Get one Leaderboard
   * const leaderboard = await prisma.leaderboard.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends leaderboardFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, leaderboardFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__leaderboardClient<runtime.Types.Result.GetResult<Prisma.$leaderboardPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Leaderboard that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {leaderboardFindFirstArgs} args - Arguments to find a Leaderboard
   * @example
   * // Get one Leaderboard
   * const leaderboard = await prisma.leaderboard.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends leaderboardFindFirstArgs>(args?: Prisma.SelectSubset<T, leaderboardFindFirstArgs<ExtArgs>>): Prisma.Prisma__leaderboardClient<runtime.Types.Result.GetResult<Prisma.$leaderboardPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Leaderboard that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {leaderboardFindFirstOrThrowArgs} args - Arguments to find a Leaderboard
   * @example
   * // Get one Leaderboard
   * const leaderboard = await prisma.leaderboard.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends leaderboardFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, leaderboardFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__leaderboardClient<runtime.Types.Result.GetResult<Prisma.$leaderboardPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Leaderboards that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {leaderboardFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Leaderboards
   * const leaderboards = await prisma.leaderboard.findMany()
   * 
   * // Get first 10 Leaderboards
   * const leaderboards = await prisma.leaderboard.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const leaderboardWithIdOnly = await prisma.leaderboard.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends leaderboardFindManyArgs>(args?: Prisma.SelectSubset<T, leaderboardFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$leaderboardPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Leaderboard.
   * @param {leaderboardCreateArgs} args - Arguments to create a Leaderboard.
   * @example
   * // Create one Leaderboard
   * const Leaderboard = await prisma.leaderboard.create({
   *   data: {
   *     // ... data to create a Leaderboard
   *   }
   * })
   * 
   */
  create<T extends leaderboardCreateArgs>(args: Prisma.SelectSubset<T, leaderboardCreateArgs<ExtArgs>>): Prisma.Prisma__leaderboardClient<runtime.Types.Result.GetResult<Prisma.$leaderboardPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Leaderboards.
   * @param {leaderboardCreateManyArgs} args - Arguments to create many Leaderboards.
   * @example
   * // Create many Leaderboards
   * const leaderboard = await prisma.leaderboard.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends leaderboardCreateManyArgs>(args?: Prisma.SelectSubset<T, leaderboardCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Leaderboards and returns the data saved in the database.
   * @param {leaderboardCreateManyAndReturnArgs} args - Arguments to create many Leaderboards.
   * @example
   * // Create many Leaderboards
   * const leaderboard = await prisma.leaderboard.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Leaderboards and only return the `id`
   * const leaderboardWithIdOnly = await prisma.leaderboard.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends leaderboardCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, leaderboardCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$leaderboardPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Leaderboard.
   * @param {leaderboardDeleteArgs} args - Arguments to delete one Leaderboard.
   * @example
   * // Delete one Leaderboard
   * const Leaderboard = await prisma.leaderboard.delete({
   *   where: {
   *     // ... filter to delete one Leaderboard
   *   }
   * })
   * 
   */
  delete<T extends leaderboardDeleteArgs>(args: Prisma.SelectSubset<T, leaderboardDeleteArgs<ExtArgs>>): Prisma.Prisma__leaderboardClient<runtime.Types.Result.GetResult<Prisma.$leaderboardPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Leaderboard.
   * @param {leaderboardUpdateArgs} args - Arguments to update one Leaderboard.
   * @example
   * // Update one Leaderboard
   * const leaderboard = await prisma.leaderboard.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends leaderboardUpdateArgs>(args: Prisma.SelectSubset<T, leaderboardUpdateArgs<ExtArgs>>): Prisma.Prisma__leaderboardClient<runtime.Types.Result.GetResult<Prisma.$leaderboardPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Leaderboards.
   * @param {leaderboardDeleteManyArgs} args - Arguments to filter Leaderboards to delete.
   * @example
   * // Delete a few Leaderboards
   * const { count } = await prisma.leaderboard.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends leaderboardDeleteManyArgs>(args?: Prisma.SelectSubset<T, leaderboardDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Leaderboards.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {leaderboardUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Leaderboards
   * const leaderboard = await prisma.leaderboard.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends leaderboardUpdateManyArgs>(args: Prisma.SelectSubset<T, leaderboardUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Leaderboards and returns the data updated in the database.
   * @param {leaderboardUpdateManyAndReturnArgs} args - Arguments to update many Leaderboards.
   * @example
   * // Update many Leaderboards
   * const leaderboard = await prisma.leaderboard.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Leaderboards and only return the `id`
   * const leaderboardWithIdOnly = await prisma.leaderboard.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends leaderboardUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, leaderboardUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$leaderboardPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Leaderboard.
   * @param {leaderboardUpsertArgs} args - Arguments to update or create a Leaderboard.
   * @example
   * // Update or create a Leaderboard
   * const leaderboard = await prisma.leaderboard.upsert({
   *   create: {
   *     // ... data to create a Leaderboard
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Leaderboard we want to update
   *   }
   * })
   */
  upsert<T extends leaderboardUpsertArgs>(args: Prisma.SelectSubset<T, leaderboardUpsertArgs<ExtArgs>>): Prisma.Prisma__leaderboardClient<runtime.Types.Result.GetResult<Prisma.$leaderboardPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Leaderboards.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {leaderboardCountArgs} args - Arguments to filter Leaderboards to count.
   * @example
   * // Count the number of Leaderboards
   * const count = await prisma.leaderboard.count({
   *   where: {
   *     // ... the filter for the Leaderboards we want to count
   *   }
   * })
  **/
  count<T extends leaderboardCountArgs>(
    args?: Prisma.Subset<T, leaderboardCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], LeaderboardCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Leaderboard.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LeaderboardAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends LeaderboardAggregateArgs>(args: Prisma.Subset<T, LeaderboardAggregateArgs>): Prisma.PrismaPromise<GetLeaderboardAggregateType<T>>

  /**
   * Group by Leaderboard.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {leaderboardGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends leaderboardGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: leaderboardGroupByArgs['orderBy'] }
      : { orderBy?: leaderboardGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, leaderboardGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLeaderboardGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the leaderboard model
 */
readonly fields: leaderboardFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for leaderboard.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__leaderboardClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the leaderboard model
 */
export interface leaderboardFieldRefs {
  readonly id: Prisma.FieldRef<"leaderboard", 'Int'>
  readonly username: Prisma.FieldRef<"leaderboard", 'String'>
  readonly score: Prisma.FieldRef<"leaderboard", 'Int'>
  readonly created_at: Prisma.FieldRef<"leaderboard", 'DateTime'>
  readonly updated_at: Prisma.FieldRef<"leaderboard", 'DateTime'>
}
    

// Custom InputTypes
/**
 * leaderboard findUnique
 */
export type leaderboardFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the leaderboard
   */
  select?: Prisma.leaderboardSelect<ExtArgs> | null
  /**
   * Omit specific fields from the leaderboard
   */
  omit?: Prisma.leaderboardOmit<ExtArgs> | null
  /**
   * Filter, which leaderboard to fetch.
   */
  where: Prisma.leaderboardWhereUniqueInput
}

/**
 * leaderboard findUniqueOrThrow
 */
export type leaderboardFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the leaderboard
   */
  select?: Prisma.leaderboardSelect<ExtArgs> | null
  /**
   * Omit specific fields from the leaderboard
   */
  omit?: Prisma.leaderboardOmit<ExtArgs> | null
  /**
   * Filter, which leaderboard to fetch.
   */
  where: Prisma.leaderboardWhereUniqueInput
}

/**
 * leaderboard findFirst
 */
export type leaderboardFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the leaderboard
   */
  select?: Prisma.leaderboardSelect<ExtArgs> | null
  /**
   * Omit specific fields from the leaderboard
   */
  omit?: Prisma.leaderboardOmit<ExtArgs> | null
  /**
   * Filter, which leaderboard to fetch.
   */
  where?: Prisma.leaderboardWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of leaderboards to fetch.
   */
  orderBy?: Prisma.leaderboardOrderByWithRelationInput | Prisma.leaderboardOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for leaderboards.
   */
  cursor?: Prisma.leaderboardWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` leaderboards from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` leaderboards.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of leaderboards.
   */
  distinct?: Prisma.LeaderboardScalarFieldEnum | Prisma.LeaderboardScalarFieldEnum[]
}

/**
 * leaderboard findFirstOrThrow
 */
export type leaderboardFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the leaderboard
   */
  select?: Prisma.leaderboardSelect<ExtArgs> | null
  /**
   * Omit specific fields from the leaderboard
   */
  omit?: Prisma.leaderboardOmit<ExtArgs> | null
  /**
   * Filter, which leaderboard to fetch.
   */
  where?: Prisma.leaderboardWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of leaderboards to fetch.
   */
  orderBy?: Prisma.leaderboardOrderByWithRelationInput | Prisma.leaderboardOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for leaderboards.
   */
  cursor?: Prisma.leaderboardWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` leaderboards from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` leaderboards.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of leaderboards.
   */
  distinct?: Prisma.LeaderboardScalarFieldEnum | Prisma.LeaderboardScalarFieldEnum[]
}

/**
 * leaderboard findMany
 */
export type leaderboardFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the leaderboard
   */
  select?: Prisma.leaderboardSelect<ExtArgs> | null
  /**
   * Omit specific fields from the leaderboard
   */
  omit?: Prisma.leaderboardOmit<ExtArgs> | null
  /**
   * Filter, which leaderboards to fetch.
   */
  where?: Prisma.leaderboardWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of leaderboards to fetch.
   */
  orderBy?: Prisma.leaderboardOrderByWithRelationInput | Prisma.leaderboardOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing leaderboards.
   */
  cursor?: Prisma.leaderboardWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` leaderboards from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` leaderboards.
   */
  skip?: number
  distinct?: Prisma.LeaderboardScalarFieldEnum | Prisma.LeaderboardScalarFieldEnum[]
}

/**
 * leaderboard create
 */
export type leaderboardCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the leaderboard
   */
  select?: Prisma.leaderboardSelect<ExtArgs> | null
  /**
   * Omit specific fields from the leaderboard
   */
  omit?: Prisma.leaderboardOmit<ExtArgs> | null
  /**
   * The data needed to create a leaderboard.
   */
  data?: Prisma.XOR<Prisma.leaderboardCreateInput, Prisma.leaderboardUncheckedCreateInput>
}

/**
 * leaderboard createMany
 */
export type leaderboardCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many leaderboards.
   */
  data: Prisma.leaderboardCreateManyInput | Prisma.leaderboardCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * leaderboard createManyAndReturn
 */
export type leaderboardCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the leaderboard
   */
  select?: Prisma.leaderboardSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the leaderboard
   */
  omit?: Prisma.leaderboardOmit<ExtArgs> | null
  /**
   * The data used to create many leaderboards.
   */
  data: Prisma.leaderboardCreateManyInput | Prisma.leaderboardCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * leaderboard update
 */
export type leaderboardUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the leaderboard
   */
  select?: Prisma.leaderboardSelect<ExtArgs> | null
  /**
   * Omit specific fields from the leaderboard
   */
  omit?: Prisma.leaderboardOmit<ExtArgs> | null
  /**
   * The data needed to update a leaderboard.
   */
  data: Prisma.XOR<Prisma.leaderboardUpdateInput, Prisma.leaderboardUncheckedUpdateInput>
  /**
   * Choose, which leaderboard to update.
   */
  where: Prisma.leaderboardWhereUniqueInput
}

/**
 * leaderboard updateMany
 */
export type leaderboardUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update leaderboards.
   */
  data: Prisma.XOR<Prisma.leaderboardUpdateManyMutationInput, Prisma.leaderboardUncheckedUpdateManyInput>
  /**
   * Filter which leaderboards to update
   */
  where?: Prisma.leaderboardWhereInput
  /**
   * Limit how many leaderboards to update.
   */
  limit?: number
}

/**
 * leaderboard updateManyAndReturn
 */
export type leaderboardUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the leaderboard
   */
  select?: Prisma.leaderboardSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the leaderboard
   */
  omit?: Prisma.leaderboardOmit<ExtArgs> | null
  /**
   * The data used to update leaderboards.
   */
  data: Prisma.XOR<Prisma.leaderboardUpdateManyMutationInput, Prisma.leaderboardUncheckedUpdateManyInput>
  /**
   * Filter which leaderboards to update
   */
  where?: Prisma.leaderboardWhereInput
  /**
   * Limit how many leaderboards to update.
   */
  limit?: number
}

/**
 * leaderboard upsert
 */
export type leaderboardUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the leaderboard
   */
  select?: Prisma.leaderboardSelect<ExtArgs> | null
  /**
   * Omit specific fields from the leaderboard
   */
  omit?: Prisma.leaderboardOmit<ExtArgs> | null
  /**
   * The filter to search for the leaderboard to update in case it exists.
   */
  where: Prisma.leaderboardWhereUniqueInput
  /**
   * In case the leaderboard found by the `where` argument doesn't exist, create a new leaderboard with this data.
   */
  create: Prisma.XOR<Prisma.leaderboardCreateInput, Prisma.leaderboardUncheckedCreateInput>
  /**
   * In case the leaderboard was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.leaderboardUpdateInput, Prisma.leaderboardUncheckedUpdateInput>
}

/**
 * leaderboard delete
 */
export type leaderboardDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the leaderboard
   */
  select?: Prisma.leaderboardSelect<ExtArgs> | null
  /**
   * Omit specific fields from the leaderboard
   */
  omit?: Prisma.leaderboardOmit<ExtArgs> | null
  /**
   * Filter which leaderboard to delete.
   */
  where: Prisma.leaderboardWhereUniqueInput
}

/**
 * leaderboard deleteMany
 */
export type leaderboardDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which leaderboards to delete
   */
  where?: Prisma.leaderboardWhereInput
  /**
   * Limit how many leaderboards to delete.
   */
  limit?: number
}

/**
 * leaderboard without action
 */
export type leaderboardDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the leaderboard
   */
  select?: Prisma.leaderboardSelect<ExtArgs> | null
  /**
   * Omit specific fields from the leaderboard
   */
  omit?: Prisma.leaderboardOmit<ExtArgs> | null
}
