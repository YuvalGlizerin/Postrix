name: Build and deploy service

permissions:
  contents: read
  id-token: write

on:
  workflow_call:
    inputs:
      environment:
        required: true
        description: 'The environment to deploy to'
        type: string
      service_name:
        required: true
        description: 'The name of the Cloud Run service to deploy'
        type: string
      service_url:
        required: false
        description: 'The branch name of the adhoc deployment if exists and the service name'
        type: string
        default: ${{ inputs.service_name }}
    outputs:
      full_service_url:
        description: 'The full URL of the deployed service'
        value: ${{ jobs.build_and_deploy.outputs.full-service-url }}

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}

    env:
      IMAGE: ${{ vars.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ vars.GCP_ARTIFACT_REPO }}/${{ inputs.service_url }}:latest

    outputs:
      full-service-url: ${{ steps.full-service-url.outputs.SERVICE_URL }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - uses: ./.github/actions/gcp-warm-up
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
        service_account: ${{ secrets.SERVICE_ACCOUNT }}
        region: ${{ vars.GCP_REGION }}
        configure_docker: true

    - name: Build Docker image
      run: |
        docker build -t ${{ env.IMAGE }} ./services/${{ inputs.service_name }}

    - name: Push Docker image to Google Artifact Registry
      run: |
        docker push ${{ env.IMAGE }}
    
    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy ${{ inputs.service_url }}-service \
        --image=${{ env.IMAGE }} \
        --region=${{ vars.GCP_REGION }} \
        --platform=managed \
        --allow-unauthenticated
        --set-env-vars=ENV=${{ inputs.environment }}

    - name: Get service URL
      id: full-service-url
      run: |
        SERVICE_URL=$(gcloud run services describe ${{ inputs.service_url }}-service --region=${{ vars.GCP_REGION }} --format='value(status.url)')
        echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_OUTPUT
