name: Build and deploy service

permissions:
  contents: read
  id-token: write

on:
  workflow_call:
    inputs:
      environment:
        required: true
        description: 'The environment to deploy to'
        type: string
      service_name:
        required: true
        description: 'The name of the Cloud Run service to deploy'
        type: string
      service_url:
        required: true
        description: 'The branch name of the adhoc deployment if exists and the service name'
        type: string
    outputs:
      full_service_url:
        description: 'The full URL of the deployed service'
        value: ${{ jobs.build_and_deploy.outputs.full-service-url }}

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    outputs:
      full-service-url: ${{ steps.full-service-url.outputs.SERVICE_URL }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set Dynamic Environment Variables
      uses: actions/github-script@v7
      id: dynamic_env_vars
      with:
        script: |
          const envVars = {
            dev: {
              PROJECT_ID: '${{ secrets.GCP_DEV_PROJECT_ID }}',
              ARTIFACT_REPO: '${{ vars.GCP_DEV_ARTIFACT_REPO }}',
              IMAGE: '${{ vars.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_DEV_PROJECT_ID }}/${{ vars.GCP_DEV_ARTIFACT_REPO }}/${{ inputs.service_url }}:latest'
            },
            prod: {
              PROJECT_ID: '${{ secrets.GCP_PROD_PROJECT_ID }}',
              ARTIFACT_REPO: '${{ vars.GCP_PROD_ARTIFACT_REPO }}',
              IMAGE: '${{ vars.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROD_PROJECT_ID }}/${{ vars.GCP_PROD_ARTIFACT_REPO }}/${{ inputs.service_url }}:latest'
            }
          };
          const selectedEnv = envVars['${{ inputs.environment }}'];
          core.setOutput('PROJECT_ID', selectedEnv.PROJECT_ID);
          core.setOutput('ARTIFACT_REPO', selectedEnv.ARTIFACT_REPO);
          core.setOutput('IMAGE', selectedEnv.IMAGE);

    - name: output envs
      run: |
        echo "${{ steps.dynamic_env_vars.outputs }}"
        echo "${{ steps.dynamic_env_vars.outputs.PROJECT_ID }}"
        echo "${{ steps.dynamic_env_vars.outputs.result.PROJECT_ID }}"

    - uses: ./.github/actions/gcp-warm-up
      with:
        project_id: ${{ steps.dynamic_env_vars.outputs.result.dev.PROJECT_ID }}
        workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
        service_account: ${{ secrets.SERVICE_ACCOUNT }}
        region: ${{ vars.GCP_REGION }}
        configure_docker: true

    - name: Build Docker image
      run: |
        docker build -t ${{ steps.dynamic_env_vars.outputs.result.IMAGE }} ./services/${{ inputs.service_name }}

    - name: Push Docker image to Google Artifact Registry
      run: |
        docker push ${{ steps.dynamic_env_vars.outputs.result.IMAGE }}
    
    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy ${{ inputs.service_url }}-service \
        --image=${{ steps.dynamic_env_vars.outputs.result.IMAGE }} \
        --region=${{ vars.GCP_REGION }} \
        --platform=managed \
        --allow-unauthenticated \
        --set-env-vars=ENV=${{ inputs.environment }}

    - name: Get service URL
      id: full-service-url
      run: |
        SERVICE_URL=$(gcloud run services describe ${{ inputs.service_url }}-service --region=${{ vars.GCP_REGION }} --format='value(status.url)')
        echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_OUTPUT
