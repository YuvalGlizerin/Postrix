# name: Deploy adhoc

# on:
#   workflow_dispatch:
#     inputs:
#       branch_name:
#         required: true
#         description: 'The branch name of the adhoc deployment'
#         type: string
#   pull_request:

# jobs:
#   build_and_deploy_adhoc:
#     uses: YuvalGlizerin/Postrix/.github/workflows/build-and-deploy.yml@main
#     with:
#       environment: dev
#       service_name: core
#       service_url: ${{ inputs.branch_name || github.head_ref || github.ref_name }}-core

name: Deploy adhoc

on:
  pull_request:

permissions:
  contents: read
  id-token: write

jobs:
  build_and_deploy_adhoc:

    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - uses: ./.github/actions/gcp-warm-up
      with:
        project_id: postrix-development
        workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
        service_account: ${{ secrets.SERVICE_ACCOUNT }}
        region: ${{ env.REGION }}
        configure_docker: true
        install_components: 'beta'

    - name: Build Docker image
      run: |
        docker build -t $REGION-docker.pkg.dev/postrix-development/development-docker/${{ env.BRANCH_NAME }}-core:latest ./services/core

    - name: Push Docker image to Google Artifact Registry
      run: |
        docker push $REGION-docker.pkg.dev/postrix-development/development-docker/${{ env.BRANCH_NAME }}-core:latest
    
    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy ${{ env.BRANCH_NAME }}-core-service \
        --image=$REGION-docker.pkg.dev/postrix-development/development-docker/${{ env.BRANCH_NAME }}-core:latest \
        --region=$REGION \
        --platform=managed \
        --allow-unauthenticated \
        --env-vars-file=./services/core/envs/dev.env \
        --labels=adhoc=true

    - name: Get Cloud Run Service URL
      id: get-url
      run: |
        SERVICE_URL=$(gcloud run services describe ${{ env.BRANCH_NAME }}-core-service \
          --platform managed \
          --region $REGION \
          --format 'value(status.url)')
        echo "service_url=$SERVICE_URL" >> $GITHUB_OUTPUT

    - name: Use Service URL
      run: |
        echo "The service URL is: ${{ steps.get-url.outputs.service_url }}"
