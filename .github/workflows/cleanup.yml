name: Cleanup namespaces and docker tags

permissions:
  actions: write
  contents: read
  id-token: write

on:
  workflow_dispatch:
  pull_request:
    types: closed
  schedule:
    - cron: '0 6 * * *'  # Every day at 06:00 UTC

env:
  NAMESPACE_AGE_DAYS_EXPIRATION: 30
  IMAGE_AGE_DAYS_EXPIRATION: 90

jobs:
  cleanup:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Repo Warm Up
        id: repo_warm_up
        uses: ./.github/actions/repo-warm-up

      - name: Configure AWS credentials
        uses: ./.github/actions/aws-warm-up

      - name: Cancel running adhoc workflows for current PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const workflows = await github.rest.actions.listWorkflowRunsForRepo({
              owner,
              repo,
              status: 'in_progress',
              head_sha: context.payload.pull_request.head.sha
            });
            
            for (const run of workflows.data.workflow_runs) {
              if (run.path.includes('.github/workflows/build-and-deploy-adhoc.yml')) {
                await github.rest.actions.cancelWorkflowRun({
                  owner,
                  repo,
                  run_id: run.id
                });
              }
            }

      - name: Delete PostgreSQL namespace schema
        if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
        run: |
          # Get list of all databases except system databases
          DATABASES=$(psql '${{ secrets.DATABASE_INSTANCE_URL }}' -At -c "SELECT datname FROM pg_database WHERE datname NOT IN ('postgres', 'template0', 'template1')")
          
          # Delete schema from all databases
          for db in $DATABASES; do
            echo "Cleaning up schema in database: $db"
            psql '${{ secrets.DATABASE_INSTANCE_URL }}'"/$db" -c "DROP SCHEMA IF EXISTS \"${{ steps.repo_warm_up.outputs.namespace }}\" CASCADE;"
          done

      - name: Delete adhoc namespace from PR
        if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
        run: |
          if kubectl get namespace "${{ steps.repo_warm_up.outputs.namespace }}" -o jsonpath='{.metadata.labels.environment}' --ignore-not-found | grep -q "adhoc"; then
            kubectl delete namespace "${{ steps.repo_warm_up.outputs.namespace }}" --ignore-not-found
          fi

      - name: Delete all expired adhoc environments
        run: |
          ADHOC_NAMESPACES=$(kubectl get namespaces -l environment=adhoc -o jsonpath='{range .items[*]}{.metadata.name} {.metadata.creationTimestamp}{"\n"}{end}' | \
            awk -v date="$(date -u +%Y-%m-%dT%H:%M:%SZ -d '${{ env.NAMESPACE_AGE_DAYS_EXPIRATION }} days ago')" '$2 <= date {print $1}')
          
          for namespace in $ADHOC_NAMESPACES; do
            kubectl delete namespace $namespace
          done

      # TODO: Add a step to delete the namespace db schema and expired schemas

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Remove all expired images
        run: |
          # Set Docker Hub username
          DOCKER_USER="yuvadius"
          
          # Get all repositories for user
          REPOSITORIES=$(docker search ${DOCKER_USER}/ --format "{{.Name}}" | grep "^${DOCKER_USER}/" | cut -d'/' -f2)
          
          # Calculate date 90 days ago in ISO format
          CUTOFF_DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ -d '${{ env.IMAGE_AGE_DAYS_EXPIRATION }} days ago')
          
          for repo in $REPOSITORIES; do
            REPOSITORY="${DOCKER_USER}/$repo"
            echo "Cleaning up repository: $REPOSITORY"
            
            # Get all tags expired tags
            RESPONSE=$(curl -s "https://hub.docker.com/v2/repositories/${REPOSITORY}/tags?page_size=1000&page=1")
            TAGS=$(echo "$RESPONSE" | jq -r '.results[] | 
              if (.tag_last_pulled == null or .tag_last_pulled <= "'$CUTOFF_DATE'") then 
                .name 
              else 
                empty 
              end')
            
            for tag in $TAGS; do
              echo "Deleting tag: $tag (not pulled since ${{ env.IMAGE_AGE_DAYS_EXPIRATION }} days)"
              curl -s -X DELETE \
                -H "Authorization: JWT ${{ secrets.DOCKER_PASSWORD }}" \
                "https://hub.docker.com/v2/repositories/${REPOSITORY}/tags/${tag}/"
            done
            
            echo "Done cleaning up repository: $REPOSITORY"
          done
