name: Cleanup namespaces and docker tags

permissions:
  contents: read
  id-token: write

on:
  workflow_dispatch:
  schedule:
    - cron: '0 6 * * 0'  # Every Sunday at 06:00 UTC
  pull_request:
    types: [closed]
    branches: [main]

jobs:
  cleanup:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: ./.github/actions/repo-warm-up
        id: repo_warm_up

      - name: Configure AWS credentials
        uses: ./.github/actions/aws-warm-up
        with:
          aws_account_id: ${{ secrets.AWS_ACCOUNT_ID }}

      - name: Delete adhoc namespace from PR
        if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
        run: |
          echo "Deleting namespace: ${{ steps.repo_warm_up.outputs.adhoc_namespace }}"
          kubectl delete namespace ${{ steps.repo_warm_up.outputs.adhoc_namespace }} --ignore-not-found

      - name: Delete all adhoc environments
        run: |
          echo "Get all namespaces with label environment=adhoc older than 30 days"
          # Use kubectl's built-in filtering by age
          ADHOC_NAMESPACES=$(kubectl get namespaces -l environment=adhoc -o jsonpath='{range .items[*]}{.metadata.name} {.metadata.creationTimestamp}{"\n"}{end}' | awk -v date="$(date -u +%Y-%m-%dT%H:%M:%SZ -d '2 days ago')" '$2 <= date {print $1}')
          
          for namespace in $ADHOC_NAMESPACES; do
            echo "Deleting namespace: $namespace (older than 30 days)"
            kubectl delete namespace $namespace
          done

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Remove all tags besides "latest" and in-use tags
        run: |
          # Set Docker Hub username
          DOCKER_USER="yuvadius"
          
          # Get all repositories for user
          REPOSITORIES=$(docker search ${DOCKER_USER}/ --format "{{.Name}}" | grep "^${DOCKER_USER}/" | cut -d'/' -f2)
          
          for repo in $REPOSITORIES; do
            REPOSITORY="${DOCKER_USER}/$repo"
            echo "Cleaning up repository: $REPOSITORY"
            
            # Get tags that are currently in use by Kubernetes
            USED_TAGS=$(kubectl get deployments -A -o jsonpath="{.items[*].spec.template.spec.containers[*].image}" | \
              tr ' ' '\n' | \
              grep "^${REPOSITORY}:" | \
              cut -d':' -f2 | \
              sort -u)
            
            echo "Tags in use: $USED_TAGS"
            
            # Get all tags except latest and in-use tags
            PAGE=1
            while true; do
              RESPONSE=$(curl -s "https://hub.docker.com/v2/repositories/${REPOSITORY}/tags?page_size=100&page=${PAGE}")
              TAGS=$(echo "$RESPONSE" | jq -r '.results[].name' | \
                grep -v '^latest$' | \
                while read -r tag; do
                  if ! echo "$USED_TAGS" | grep -q "^${tag}$"; then
                    echo "$tag"
                  fi
                done)
              
              # Break if no more tags
              if [ -z "$TAGS" ]; then
                break
              fi
              
              for tag in $TAGS; do
                echo "Deleting tag: $tag"
                curl -s -X DELETE \
                  -H "Authorization: JWT ${{ secrets.DOCKER_PASSWORD }}" \
                  "https://hub.docker.com/v2/repositories/${REPOSITORY}/tags/${tag}/"
              done
              
              # Check if there are more pages
              HAS_NEXT=$(echo "$RESPONSE" | jq -r '.next')
              if [ "$HAS_NEXT" = "null" ]; then
                break
              fi
              
              PAGE=$((PAGE + 1))
            done
            
            echo "Done cleaning up repository: $REPOSITORY"
          done
