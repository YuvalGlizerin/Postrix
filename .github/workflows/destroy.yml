name: Destroy PR resources

permissions:
  contents: read
  id-token: write

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'  # Every day at 00:00 UTC
  pull_request:
    types:
      - closed

env:
  BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
  SERVICE_NAME: ${{ github.head_ref }}-core

jobs:
  destroy:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - uses: ./.github/actions/gcp-warm-up
      with:
        project_id: ${{ secrets.GCP_DEV_PROJECT_ID }}
        workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
        service_account: ${{ secrets.SERVICE_ACCOUNT }}
        region: ${{ vars.GCP_REGION }}
        install_components: beta

    - name: Delete expired deployments
      run: |
        # Get a list of adhoc services
        SERVICES=$(gcloud run services list \
          --platform=managed \
          --region=${{ vars.GCP_REGION }} \
          --format="value(metadata.name, metadata.labels.pr_number)") \
          --filter="metadata.labels.pr_number:*")

        # Convert the SERVICES string to an array
        services_array=$'\n' read -r -d '' -a services_array <<< "$SERVICES"

        for service_entry in "${services_array[@]}"; do
          SERVICE_NAME=$(echo $service_entry | awk '{print $1}')
          PR_NUMBER=$(echo $service_entry | awk '{print $2}')

          # Check if there is an open pull request with this pr_number
          PR_OPEN=$(gh pr view $PR_NUMBER --json state -q .state || echo "closed")

          if [ "$PR_OPEN" != "OPEN" ]; then
            echo "Deleting service $SERVICE_NAME with closed PR #$PR_NUMBER"
            gcloud run services delete $SERVICE_NAME --platform=managed --region=$REGION --quiet
            gcloud artifacts docker images delete ${{ vars.GCP_REGION }}-docker.pkg.dev/postrix-development/development-docker/$SERVICE_NAME --quiet
          else
            echo "Service $SERVICE_NAME has an open PR #$PR_NUMBER"
          fi
        done
