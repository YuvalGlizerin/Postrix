name: Destroy PR resources

permissions:
  contents: read
  id-token: write

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'  # Every day at 00:00 UTC
  pull_request:
    types:
      - closed

env:
  BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
  SERVICE_NAME: ${{ github.head_ref }}-core

jobs:
  destroy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - uses: ./.github/actions/gcp-warm-up
      with:
        project_id: ${{ secrets.GCP_DEV_PROJECT_ID }}
        workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
        service_account: ${{ secrets.SERVICE_ACCOUNT }}
        region: ${{ vars.GCP_REGION }}
        install_components: beta

    - name: Delete expired deployments
      uses: actions/github-script@v7
      with:
        script: |
          const { execSync } = require('child_process');
    
          // Fetch the list of adhoc services
          const servicesOutput = execSync(`gcloud run services list \
            --platform=managed \
            --region=${{ vars.GCP_REGION }} \
            --format="value(metadata.name, metadata.labels.pr_number)" \
            --filter="metadata.labels.pr_number:*"`).toString();
    
          // Check if servicesOutput is empty
          if (!servicesOutput.trim()) {
            console.log("No services found with a pr_number label.");
            return;
          }
    
          // Convert the servicesOutput string to an array
          const servicesArray = servicesOutput.trim().split('\n');
    
          for (const serviceEntry of servicesArray) {
            const [serviceName, prNumber] = serviceEntry.split(/\s+/);
    
            console.log(`Checking PR #${prNumber} for service ${serviceName}`);
    
            try {
              const pr = await github.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber,
              });
    
              if (pr.data.state !== 'open') {
                console.log(`Deleting service ${serviceName} with closed PR #${prNumber}`);
                execSync(`gcloud run services delete ${serviceName} --platform=managed --region=${{ vars.GCP_REGION }} --quiet`);
                execSync(`gcloud artifacts docker images delete ${{ vars.GCP_REGION }}-docker.pkg.dev/postrix-development/development-docker/${serviceName} --quiet`);
              } else {
                console.log(`Service ${serviceName} has an open PR #${prNumber}`);
              }
            } catch (error) {
              console.log(`Error checking PR #${prNumber}: ${error.message}`);
            }
          }

    # - name: Delete expired deployments
    #   run: |
    #     # Get a list of adhoc services
    #     SERVICES=$(gcloud run services list \
    #       --platform=managed \
    #       --region=${{ vars.GCP_REGION }} \
    #       --format="value(metadata.name, metadata.labels.pr_number)" \
    #       --filter="metadata.labels.pr_number:*")

    #     # Check if SERVICES is empty
    #     if [ -z "$SERVICES" ]; then
    #       echo "No services found with a pr_number label."
    #       exit 0
    #     fi

    #     # Convert the SERVICES string to an array
    #     IFS=$'\n' read -r -d '' -a services_array <<< "$SERVICES"$'\n'

    #     for service_entry in "${services_array[@]}"; do
    #       SERVICE_NAME=$(echo $service_entry | awk '{print $1}')
    #       PR_NUMBER=$(echo $service_entry | awk '{print $2}')

    #       # Check if there is an open pull request with this pr_number
    #       PR_OPEN=$(gh pr view $PR_NUMBER --json state -q .state || echo "closed")

    #       if [ "$PR_OPEN" != "OPEN" ]; then
    #         echo "Deleting service $SERVICE_NAME with closed PR #$PR_NUMBER"
    #         gcloud run services delete $SERVICE_NAME --platform=managed --region=$REGION --quiet
    #         gcloud artifacts docker images delete ${{ vars.GCP_REGION }}-docker.pkg.dev/postrix-development/development-docker/$SERVICE_NAME --quiet
    #       else
    #         echo "Service $SERVICE_NAME has an open PR #$PR_NUMBER"
    #       fi
    #     done
